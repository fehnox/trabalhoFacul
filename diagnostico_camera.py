import cv2
import platform
import sys

def diagnosticar_camera():
    """
    Fun√ß√£o para diagnosticar problemas com a c√¢mera
    """
    print("üîß DIAGN√ìSTICO DE C√ÇMERA - Sistema de Detec√ß√£o de M√°scaras")
    print("=" * 60)
    
    # Informa√ß√µes do sistema
    print("üìä INFORMA√á√ïES DO SISTEMA:")
    print(f"   Sistema Operacional: {platform.system()} {platform.release()}")
    print(f"   Vers√£o do Python: {sys.version}")
    print(f"   Vers√£o do OpenCV: {cv2.__version__}")
    
    # Verificar backends dispon√≠veis
    print(f"\nüîå BACKENDS DISPON√çVEIS:")
    backends = []
    for backend_name in dir(cv2):
        if backend_name.startswith('CAP_'):
            try:
                backend_value = getattr(cv2, backend_name)
                if isinstance(backend_value, int):
                    backends.append((backend_name, backend_value))
            except:
                pass
    
    for name, value in backends[:10]:  # Mostrar os primeiros 10
        print(f"   {name}: {value}")
    
    # Testar c√¢meras
    print(f"\nüìπ TESTANDO C√ÇMERAS:")
    cameras_encontradas = []
    
    # Teste b√°sico
    print("   Teste b√°sico (√≠ndices 0-4):")
    for i in range(5):
        try:
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret and frame is not None:
                    h, w = frame.shape[:2]
                    print(f"   ‚úÖ C√¢mera {i}: OK - Resolu√ß√£o: {w}x{h}")
                    cameras_encontradas.append(i)
                else:
                    print(f"   ‚ö†Ô∏è C√¢mera {i}: Abriu mas n√£o consegue ler frames")
                cap.release()
            else:
                print(f"   ‚ùå C√¢mera {i}: N√£o dispon√≠vel")
        except Exception as e:
            print(f"   ‚ùå C√¢mera {i}: Erro - {str(e)}")
    
    # Teste com backends espec√≠ficos (Windows)
    if platform.system() == "Windows":
        print("\n   Teste com backends espec√≠ficos do Windows:")
        backends_windows = [
            (cv2.CAP_DSHOW, "DirectShow"),
            (cv2.CAP_MSMF, "Media Foundation"),
            (cv2.CAP_VFW, "Video for Windows")
        ]
        
        for backend, nome in backends_windows:
            print(f"\n   Testando {nome}:")
            for i in range(3):
                try:
                    cap = cv2.VideoCapture(i, backend)
                    if cap.isOpened():
                        ret, frame = cap.read()
                        if ret and frame is not None:
                            h, w = frame.shape[:2]
                            print(f"     ‚úÖ C√¢mera {i}: OK - Resolu√ß√£o: {w}x{h}")
                            if i not in cameras_encontradas:
                                cameras_encontradas.append(f"{i} ({nome})")
                        cap.release()
                    else:
                        print(f"     ‚ùå C√¢mera {i}: N√£o dispon√≠vel")
                except Exception as e:
                    print(f"     ‚ùå C√¢mera {i}: Erro - {str(e)}")
    
    # Resumo
    print(f"\nüìã RESUMO:")
    if cameras_encontradas:
        print(f"   ‚úÖ {len(cameras_encontradas)} c√¢mera(s) encontrada(s): {cameras_encontradas}")
        print("   üé• Voc√™ pode usar o sistema de detec√ß√£o de m√°scaras!")
        
        # Teste de demonstra√ß√£o
        print(f"\nüß™ TESTE DE DEMONSTRA√á√ÉO:")
        print("   Deseja testar a primeira c√¢mera encontrada? (s/n)")
        resposta = input("   ").strip().lower()
        
        if resposta == 's':
            testar_camera_demo(cameras_encontradas[0])
    else:
        print("   ‚ùå Nenhuma c√¢mera foi encontrada")
        print("\nüîß POSS√çVEIS SOLU√á√ïES:")
        print("   1. Conecte uma webcam USB")
        print("   2. Verifique se a c√¢mera n√£o est√° sendo usada por outro programa")
        print("   3. Atualize os drivers da c√¢mera")
        print("   4. Verifique as permiss√µes de c√¢mera no Windows:")
        print("      - Configura√ß√µes > Privacidade > C√¢mera")
        print("      - Permitir acesso de aplicativos da √°rea de trabalho")
        print("   5. Tente executar como administrador")
        print("   6. Reinicie o computador")

def testar_camera_demo(camera_index):
    """
    Teste de demonstra√ß√£o da c√¢mera
    """
    print(f"\nüìπ Iniciando teste da c√¢mera {camera_index}...")
    print("   Pressione 'q' para sair")
    
    try:
        # Se o √≠ndice cont√©m informa√ß√µes do backend, usar apenas o n√∫mero
        if isinstance(camera_index, str) and "(" in camera_index:
            camera_index = int(camera_index.split()[0])
        
        cap = cv2.VideoCapture(int(camera_index))
        
        if not cap.isOpened():
            print("   ‚ùå Erro: N√£o foi poss√≠vel abrir a c√¢mera")
            return
        
        print("   ‚úÖ C√¢mera aberta com sucesso!")
        
        frame_count = 0
        while True:
            ret, frame = cap.read()
            if not ret:
                print("   ‚ùå Erro ao capturar frame")
                break
            
            frame_count += 1
            
            # Adicionar informa√ß√µes na tela
            cv2.putText(frame, f"Teste de Camera - Frame {frame_count}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(frame, "Pressione 'q' para sair", (10, 60), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
            
            cv2.imshow('Teste de Camera - Diagn√≥stico', frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()
        print("   ‚úÖ Teste conclu√≠do com sucesso!")
        
    except Exception as e:
        print(f"   ‚ùå Erro durante o teste: {str(e)}")

def verificar_permissoes_windows():
    """
    Guia para verificar permiss√µes no Windows
    """
    print("\nüîê VERIFICANDO PERMISS√ïES DO WINDOWS:")
    print("   1. Pressione Win + I para abrir Configura√ß√µes")
    print("   2. V√° para Privacidade e seguran√ßa > C√¢mera")
    print("   3. Certifique-se de que 'Acesso √† c√¢mera' est√° ATIVADO")
    print("   4. Certifique-se de que 'Permitir que aplicativos acessem sua c√¢mera' est√° ATIVADO")
    print("   5. Certifique-se de que 'Permitir que aplicativos da √°rea de trabalho acessem sua c√¢mera' est√° ATIVADO")

if __name__ == "__main__":
    try:
        diagnosticar_camera()
        
        print(f"\n‚ùì Precisa de mais ajuda com permiss√µes? (s/n)")
        resposta = input("   ").strip().lower()
        if resposta == 's':
            verificar_permissoes_windows()
            
    except KeyboardInterrupt:
        print("\n\nüëã Diagn√≥stico interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante o diagn√≥stico: {str(e)}")
